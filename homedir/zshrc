# Set directory for zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Enable Oh-My-Posh
eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/zen.toml)"

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle :compinstall filename ~/.zshrc
autoload -U compinit && compinit

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_CTRL_T_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'
	--style=full"
export FZF_CTRL_R_OPTS="
  --bind 'ctrl-y:execute-silent(echo -n {2..} | wl-copy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'
	--style=full"
export FZF_ALT_C_OPTS="
  --walker-skip .git,node_modules,target
  --preview 'tree -C {}'
	--style=full"

zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'eza -1 --color=always $realpath'

# Add in zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# Add in snippets
zinit snippet OMZL::git.zsh
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::archlinux
zinit snippet OMZP::aws
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx
zinit snippet OMZP::command-not-found

# History settings
HISTFILE=~/.histfile
HISTSIZE=5000
SAVEHIST=5000
HISTDUP=erase
setopt=appendhistory
setopt=sharehistory
setopt=hist_ignore_space
setopt=hist_ignore_all_dups
setopt=hist_save_no_dups
setopt=hist_ignore_dups
setopt=hist_find_no_dups
unsetopt beep

#This enables the help command
autoload -U run-help
autoload run-help-git
autoload run-help-svn
autoload run-help-svk
unalias run-help &>/dev/null
alias help=run-help

#This prevents SIGSTOP at Ctrl-S
#stty -ixon
setopt noflowcontrol

#This enables zmv
autoload -Uz zmv

#This enables the use of colors
autoload -U colors && colors

#This sets autocd
setopt autocd

#This sets cd to never select parent directory
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#This removes the trailing slash of directories used as arguments
zstyle ':completion:*' squeeze-slashes true

#This activates auto-correction
setopt correct

#This sets autocomplete for aliases
# setopt no_complete_aliases

#This sets default editor to nvim
export EDITOR=nvim

#Vi bindings
bindkey -e
# export KEYTIMEOUT=1

# bindkey -r "^["
# bindkey "^[[27;2;27~" vi-cmd-mode
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-word
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward
bindkey '^y' autosuggest-accept

#Aliases
alias -g L="|less -FX"
alias x="chmod +x"
alias sx="sudo chmod +x"
alias cat="bat"
alias ls="eza -s type"
alias ll="eza -l -s type"
alias du="dust"
alias fzf="fzf --height=40% --preview 'bat -n --color=always {}'"
alias grep="grep --color=auto"
alias e="$EDITOR"
alias se="sudoedit"
alias ..="cd .."
alias ..2="cd ../.."
alias ln="ln -v"
alias mkdir="mkdir -v"
alias rm="noglob timeout 10 rm -iv --one-file-system"
alias rmdir="rmdir -v"
alias srm="noglob timeout 10 sudo rm -iv --one-file-system"
alias -g cp="cp -iv"
alias -g mv="mv -iv"
alias locate="plocate"
alias trash="trash -iv"
alias yank="yay -S"
alias yeet="yay -Rcs"
alias rcp="rsync -v --progress"
alias rmv="rsync -v --progress --remove-source-files"
alias sshcp="rsync -avHPe \"ssh -p$(cat ~/.ssh_port_private 2> /dev/null)\""
alias restartpw="systemctl --user restart pipewire.service pipewire-pulse.socket"
alias cls="clear"
alias icat="kitten icat"
alias lg="lazygit"

alias gs="git status -sb"
alias ga="git add"
alias gc="git commit -m"

alias Man="MANPAGER='nvim +Man!' man"

clpkg ()
{
	if [[ $(pacman -Qtd) ]]
	then
		echo "Clearing unaffiliated packages..."
		sudo pacman -Rns $(pacman -Qtdq)
	else
		echo "No unaffiliated packages found."
	fi
}

syu ()
{
	yay -Syu "$@"
	(~/.config/bspwm/panel_resources/updates > "$PANEL_FIFO" &)
	echo "$bold_color$fg[blue]::$fg[white] Checking for unaffiliated packages...${reset_color}"
	clpkg
}

mkcd ()
{
	mkdir -p "$1";
	cd "$1"
}

function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1     ;;
			*.tar.gz)    tar xvzf $1     ;;
			*.tar.xz)	 tar xvJf $1	 ;;
			*.bz2)       bunzip2 $1      ;;
			*.rar)       unrar x $1      ;;
			*.gz)        gunzip $1       ;;
			*.tar)       tar xvf $1      ;;
			*.tbz2)      tar xvjf $1     ;;
			*.tgz)       tar xvzf $1     ;;
			*.zip)       unzip $1        ;;
			*.Z)         uncompress $1   ;;
			*.7z)        7z x $1         ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

escape() {
    local escape_string_input=$@
	if [[ ! $escape_string_input ]]; then
    	echo -n "String to escape: "
    	read escape_string_input
	fi
    printf '%q\n' "$escape_string_input"
}

#Online services
cs() { curl cheat.sh/$1; }

#create a zkbd compatible hash;
#to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

#setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "\e[H"			    beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "\e[F"      		end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   history-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" history-search-forward

eval "$(zoxide init --cmd cd zsh)"
